@page "/tornei/anagrafica/{email}"
@page "/tornei/anagrafica"
@using Database.Models
@using Database.Services
@using Microsoft.AspNetCore.WebUtilities
@using Syncfusion.Blazor.DropDowns
@inject IWebHostEnvironment Environment
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Data
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@* Syncfusion Toast *@
<SfToast @ref="toast" Target="#target">
    <ToastPositionSettings X="calc(100% - 10px)" Y="10px"></ToastPositionSettings>
</SfToast>

<EditForm Model="@anagrafica" OnValidSubmit="SaveOrUpdateAnagrafica">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">


        <h3>
            Anagrafica
        </h3>
        <div class="row mb-1">

            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>Cognome:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="Cognome" @bind-Value="anagrafica.Cognome" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.Cognome)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>Nome:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="Nome" @bind-Value="anagrafica.Nome" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.Nome)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>CodFiscale:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="CodFiscale" @bind-Value="anagrafica.CodFiscale" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.CodFiscale)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>Indirizzo:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="Indirizzo" @bind-Value="anagrafica.Indirizzo" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.Indirizzo)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>Telefono:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    @* [LUCA]: Manage with the onkeypress="" event the fact that you can only enter numbers *@
                    @*    [XXXX] this is blazor form validation and recomended as this is more secure , this is recomended but if you say we can use java script validation *@
                    <InputText id="Telefono" @bind-Value="anagrafica.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.Telefono)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>Cellulare:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    @* [LUCA]: Manage with the onkeypress="" event the fact that you can only enter numbers *@
                    <InputText id="Cellulare" @bind-Value="anagrafica.Cellulare" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.Cellulare)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>Mail:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="Mail" @bind-Value="anagrafica.Mail" class="form-control" />
                    <ValidationMessage For="@(() => anagrafica.Mail)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label>NoMail:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputCheckbox id="NoMail" @bind-Value="anagrafica.NoMail" class="form-check-input" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="CodComuneDiNascita">Comune Di Nascita:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    // [Luca]:
                    <SfAutoComplete TValue="string" TItem="Comune" Query="@LocalDataQuery" @bind-Value="selectedNisComune" Placeholder="Seleziona Comune" DataSource="@ComuneList" PopupHeight="300px" PopupWidth="300px" EnableVirtualization="true" ShowPopupButton="true">
                        <AutoCompleteFieldSettings Value="DesComuneEstesa"  />
                    </SfAutoComplete>
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="DataDiNascita">Data Di Nascita:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputDate id="DataDiNascita" @bind-Value="anagrafica.DataDiNascita" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Sesso">Sesso:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <label for="Sesso">Sesso:</label>
                    <SfDropDownList TValue="string" TItem="string" @bind-Value="anagrafica.Sesso" DataSource="@GenderList" Placeholder="Select Gender">
                    </SfDropDownList>
                </div>

            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="CodComuneResidenza">Comune Residenza:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">

                    <SfAutoComplete TValue="string" TItem="Comune" Query="@LocalDataQuery" @bind-Value="selectedResComune" Placeholder="Select a Comune" DataSource="@ComuneList" PopupHeight="300px" PopupWidth="300px" EnableVirtualization="true" ShowPopupButton="true">
                        <AutoCompleteFieldSettings Value="DesComuneEstesa" />
                    </SfAutoComplete>

                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="IndirizzoResidenza">Indirizzo Residenza:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="IndirizzoResidenza" @bind-Value="anagrafica.IndirizzoResidenza" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="immagine">Immagine:</label>
                </div>
            </div>

            <div class="col-md-8">
                <div class="form-group">

                    <InputFile OnChange="HandleFileChange" class="form-control" />

                    @if (@desiredPath != null)
                    {
                        <img src="@desiredPath" alt="Selected Image" style="max-width: 300px; max-height: 300px;" />
                    }
                    @if (imageModel.ImageData != null)
                    {



                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageModel.ImageData)}")" alt="Scegli immagine" style="max-width: 300px; max-height: 300px; margin-right:12px" />

                        <button style="margin:5px" class="btn btn-danger" @onclick="DeleteImage" type="button">Delete Image</button>
                    }
                </div>
            </div>
        </div>
        <div class="row mb-1">
            <div class="offset-md-3 col-md-8 mb-1">
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Salva</button>
                </div>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public string email { get; set; } = string.Empty;
    private List<string> GenderList = new List<string> { "Male", "Female" };
    private Anagrafica anagrafica = new Anagrafica();

    private bool isEditMode = false;
    public Query LocalDataQuery = new Query().Take(6);

    @inject ComuneService comuneService;
    @inject AnagraficaService anagraficaService ;

    private ImageModel imageModel = new ImageModel();

    string selectedResComune=string.Empty;
    string selectedNisComune=string.Empty;
    List<Comune> ComuneList = new List<Comune>();
    private SfToast toast;
    string desiredPath;

    #region Initialization
    int CodAnagrafica = 0;

    protected override void OnInitialized()
    {
        // Uso la virtualizzazione blazor per evitare di caricare la query competa, in pratica carica solo un po di record alla volta
        anagrafica.DataDiNascita = DateOnly.FromDateTime(DateTime.Now);
        this.ComuneList = Enumerable.Range(1, 150).Select(i => new Comune()).ToList();
       
        
        
        
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("CodAnagrafica", out var id))
        {
            if (string.IsNullOrEmpty(id))
            {
                CodAnagrafica = 0;
            }
            else
            {
                CodAnagrafica = Convert.ToInt32(id);
            }
        }
    }



    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                ComuneList = await comuneService.GetComunesAsync();
                GetProfile();
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    #endregion

    private async void GetProfile()
    {
        try
        {
            if (CodAnagrafica != 0)
            {
                var anarg = await anagraficaService.GetAnagraficaByIdAsync(CodAnagrafica);
                if (anarg != null)
                {
                    anagrafica = anarg;
                    selectedResComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneResidenza).DesComuneEstesa;
                    selectedNisComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneDiNascita).DesComuneEstesa;
                    string fullPath = anagrafica.Immagine;
                    string fileName = System.IO.Path.GetFileName(fullPath);
                    imageModel.ImageName = fileName;
                    desiredPath = @"Dati\Tornei\Profilo\" + fileName;
                    StateHasChanged();

                }
            }
            else
            {

                var encodedUserId = await LocalStorage.GetItemAsStringAsync("LoginUserId");

                var userid = encodedUserId?.Replace("\"", "");
                if (userid != null)
                {
                    // userid = "fca9bf6f-b554-48e2-a8cc-9462b9f32145";
                    var anarg = await anagraficaService.GetAnagraficaByUserIdAsync(userid.ToString());
                    if (anarg != null)
                    {
                        anagrafica = anarg;
                        selectedResComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneResidenza).DesComuneEstesa;
                        selectedNisComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneDiNascita).DesComuneEstesa;
                        
                        string fullPath = anagrafica.Immagine;
                        string fileName = System.IO.Path.GetFileName(fullPath);
                        desiredPath = @"Dati\Tornei\Profilo\" + fileName;
                        StateHasChanged();

                    }
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    // Salva o aggiorna l'anagrafica
    private async Task SaveOrUpdateAnagrafica()
    {
        if (isEditMode)
        {
            // Se sono in modifica aggiorno
            //  await anagraficaService.UpdateAnagraficaAsync(anagrafica);
        }
        else
        {
            /* var uploadsFolder = Path.Combine(Environment.WebRootPath, "Societa");
                var fileName = $"{Guid.NewGuid().ToString()}.png";
                var filePath = Path.Combine(uploadsFolder, fileName);*/

            //var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            // var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
            var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
            var uploadsFolder = Path.Combine(Environment.WebRootPath, Percorso);

            var fileName = $"{Guid.NewGuid().ToString()}.png"; // creo il nome dell'immagine
            var filePath = Path.Combine(uploadsFolder, fileName); // imposto il percorso di salvataggio dell'immagine
            var rescom = ComuneList.FirstOrDefault(x => x.DesComuneEstesa == selectedResComune);
            var niscom = ComuneList.FirstOrDefault(x => x.DesComuneEstesa == selectedNisComune);
            if (rescom != null)
                anagrafica.CodComuneResidenza = rescom.CodComune;
            if (niscom != null)
                anagrafica.CodComuneDiNascita = niscom.CodComune;
            
                
            if (anagrafica.CodAnagrafica == 0)
            {
                anagrafica.Immagine = filePath; // imposto il nome immagine su anagrafica
                await anagraficaService.AddAnagraficaAsync(anagrafica, email); // Aggiorno il profilo e controllo se associarlo
            }
            else
            {
                if (imageModel.ImageData != null)
                {
                    anagrafica.Immagine = filePath; // imposto il nome e percorso immagine
                }
                else
                {
                    anagrafica.Immagine = imageModel.ImageName;
                }
                await anagraficaService.UpdateAnagraficaAsync(anagrafica); // Aggiorno il profilo e controllo se associarlo

            }
            if (imageModel.ImageData != null)
            {
                await File.WriteAllBytesAsync(filePath, imageModel.ImageData); // Salvo l'immagine nel server
            }

            // Pop up operazione riuscita
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Successo",
                    Content = "Operatione conclusa con successo",
                    CssClass = "e-toast-success"
                });
            navigationManager.NavigateTo("/");
        }
    }


    // Gestione immagine
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            // Carico l'immagine dal file upload al modello
            // var imageBytes = new byte[e.File.Size];
            // await e.File.OpenReadStream().ReadAsync(imageBytes);
            // imageModel.ImageData = imageBytes;
            // imageModel.ImageName = e.File.Name;
            int filesize = 10051200;
            using var memorystream = new MemoryStream();
            await e.File.OpenReadStream(filesize).CopyToAsync(memorystream);
            var imageBytes = memorystream.ToArray();
            imageModel.ImageData = imageBytes;
            imageModel.ImageName = e.File.Name;
            desiredPath = null;
            StateHasChanged();

            // Notifica al componente che il suo stato è cambiato. Quando applicabile, questo lo farà fa sì che il componente venga nuovamente renderizzato.
            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }

    // Cancello l'immagine
    private void DeleteImage()
    {
        imageModel.ImageData = null;
        imageModel.ImageName = null;
        StateHasChanged(); // Notifica al componente che il suo stato è cambiato. Quando applicabile, questo lo farà fa sì che il componente venga nuovamente renderizzato.
    }
}
