@* HERE INSERT/UPDATE PROFILE IN TABLE SOCIETA *@
@page "/tornei/societa"
@page "/tornei/societa/{email}"

@* Database *@
@using Database.Models
@using Database.Services

@* Oggetti Syncfusion *@
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Notifications

@* Gestione dei percorsi *@
@inject IWebHostEnvironment Environment
@* Nagigazione *@
@inject NavigationManager navigationManager

@* Dichiaro che uso in questa pagina il local storage *@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<SfToast @ref="toast" Target="#target">
   <ToastPositionSettings X="calc(100% - 10px)" Y="10px"></ToastPositionSettings>
</SfToast>

<EditForm Model="@objSocieta" OnInitializedAsync="LoadSocietaData" OnInvalidSubmit="invalid" OnValidSubmit="SaveOrUpdateSocieta">
   <DataAnnotationsValidator />
   @*   <ValidationSummary /> *@

   <div class="container">
      <h1>Societa</h1>

      <h3 class="mb-1"> DATI AZANDALI</h3>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="DesSocieta">Rag Societa:</label>
            </div>
         </div>
         <div class="col-md-8 mb-1">
            <div class="form-group">
               <InputText id="DesSocieta" @bind-Value="objSocieta.DesSocieta" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.DesSocieta)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-2 ">
            <div class="form-group">
               <label for="DesSocieta">Partita Iva:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="PartitaIva" @bind-Value="objSocieta.PartitaIva" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.PartitaIva)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-2 ">
            <div class="form-group">
               <label for="Pec">Pec:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="Pec" @bind-Value="objSocieta.Pec" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.Pec)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-2 ">
            <div class="form-group">
               <label for="CodiceDestinatario">Codice Destinatario:</label>

            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="CodiceDestinatario" @bind-Value="objSocieta.CodiceDestinatario" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.CodiceDestinatario)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="QualificaClub">Qualifica Club:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <SfDropDownList TValue="string" TItem="string" DataSource="@QualificaClubValues" @bind-Value="objSocieta.QualificaClub" Placeholder="Select QualificaClub" />
               <ValidationMessage For="@(() => objSocieta.QualificaClub)" />
            </div>
         </div>
      </div>

      <h3 class="mt-3"> RECAPITO/SEDE</h3>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="CodComune">Comune:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
                    <SfAutoComplete TValue="string" TItem="Comune" @bind-Value="comuneTitle" Placeholder="Select a Comune" DataSource="@ComuneList" PopupHeight="300px" PopupWidth="300px" EnableVirtualization="true" ShowPopupButton="true" AllowFiltering="true">
                        <AutoCompleteFieldSettings Value="DesComuneEstesa" />
               </SfAutoComplete>
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="Indirizzo">Indirizzo:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="Indirizzo" @bind-Value="objSocieta.Indirizzo" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.Indirizzo)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="Telefono">Telefono:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="Telefono" @bind-Value="objSocieta.Telefono" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.Telefono)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="Cellulare">Cellulare:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="Cellulare" @bind-Value="objSocieta.Cellulare" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.Cellulare)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="Cellulare">EMail:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="Mail" @bind-Value="objSocieta.Mail" class="form-control" />
               <ValidationMessage For="@(() => objSocieta.Mail)" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="SitoInternet">Sito Internet:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="SitoInternet" @bind-Value="objSocieta.SitoInternet" class="form-control" />
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="Nota">Nota:</label>
            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputTextArea id="Nota" @bind-Value="objSocieta.Nota" class="form-control" />
            </div>
         </div>
      </div>

      <h3 class="mt-3"> CONTABILE</h3>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="Iban">Iban:</label>

            </div>
         </div>
         <div class="col-md-8 ">
            <div class="form-group">
               <InputText id="Iban" @bind-Value="objSocieta.Iban" class="form-control" />
            </div>
         </div>
      </div>

      <h3 class="mt-3"> PROFILO ONLINE</h3>

      <div class="row mb-1">
         <div class="col-md-3 mb-1">
            <div class="form-group">
               <label for="immagine">Immagine:</label>
            </div>
         </div>
         <div class="col-md-8">
            <div class="form-group">
               <InputFile OnChange="HandleFileChange" class="form-control" />
               @if (imageModel.ImageData != null)
               {
                  <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageModel.ImageData)}")" alt="Selected Image" style="max-width: 300px; max-height: 300px;" />
                  <button style="margin:5px" class="btn btn-danger" @onclick="DeleteImage" type="button">Delete Image</button>
               }
            </div>
         </div>
      </div>

      <div class="row mb-1">
         <div class="offset-md-3 col-md-8 mb-1">
            <div class="form-group">
               <button type="submit" class="btn btn-primary">Salva</button>
            </div>
         </div>
      </div>
   </div>

</EditForm>

@code {

    [Parameter]
    public string email { get; set; } = string.Empty;
    public string comuneTitle = string.Empty;
    private List<string> QualificaClubValues = new List<string> { "NC", "1 LV", "2 LV", "3 LV", "4 LV", "A" }; // Lista valori per Qualifica club

   @inject ComuneService comuneService; // Dichiaro di voler usare le procedure per la gestione dei comuni
   @inject SocietaService societaService; // Dichiaro di voler usare le procedure per la gestione della società

   Societa objSocieta = new Societa(); // Creo l'oggetto società

   private ImageModel imageModel = new ImageModel(); // Dichiaro l'oggetto immagine

   // [Luca]: For me this is of no use, it is never used
   // Comune com = new Comune();

   List<Comune> ComuneList = new List<Comune>();
  // public Query LocalDataQuery = new Query().Take(6);
   private SfToast toast;

   // In fase di inizializzazione
   protected override void OnInitialized()
   {
      // [Luca]: but why do I only upload the first 150?
      //this.ComuneList = Enumerable.Range(1, 150).Select(i => new Comune()).ToList(); // Carico la lista dei comuni
   }

   // dopo render della pagina
   protected override async void OnAfterRender(bool firstRender)
   {
      try
      {
         // Al primo caricamento
         if (firstRender)
         {
            ComuneList = await comuneService.GetComunesAsync(); // Carico la lista dei comuni
            GetProfile(); // Mi carico il profilo dal locale storage
            StateHasChanged(); // Aggiorno lo stato
         }
      }
      catch (Exception)
      {
         throw;
      }
   }

   // Recupero la società utente dal local storage
   private async void GetProfile()
   {
      try
      {
         var encodedUserId = await LocalStorage.GetItemAsStringAsync("LoginUserId"); // Leggo lo user ID dal local storage dove l'ho memorizzato
         var userid = encodedUserId?.Replace("\"", ""); // Lo codifico rimpiazzando le / con niente
         if (userid != null) // Se è diverso da null
         {
            var soc = await societaService.GetSocietaByUserIdAsync(userid.ToString());
            if (soc != null) // Se la società viene trovata
            {
               objSocieta = soc; // Passo la società letta        
                    var com = ComuneList.FirstOrDefault(x => x.CodComune == objSocieta.CodComune);     
                    comuneTitle = com.DesComuneEstesa;
                    StateHasChanged(); // [Luca]: StateHasChanged this function is also called after the GetProfile function, so I don't think it is necessary to call it inside too, or am I wrong see  procedure OnAfterRender
            }
         }
      }
      catch (Exception)
      {
         throw;
      }
   }

   // Salva o aggiorna la società
   private async Task SaveOrUpdateSocieta()
   {
      try
      {
         // [Luca]: the logo is not a mandatory field, if I don't add it I save it and point the record to the default logo.
         // Controllo se nel modello immagine ho qualcosa, se non ho nulla mando un messaggio di errore
         if (imageModel.ImageName == null)
         {
            // Pop up errore
            await toast.ShowAsync(new ToastModel
               {
                  Title = "Error",
                  Content = "Select Logo",
                  CssClass = "e-toast-danger"
               });
            return;
         }
         else
         {
            // Leggo il percorso dove uploadare l'immagine
            var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
            var uploadsFolder = Path.Combine(Environment.WebRootPath, Percorso);

            var fileName = $"{Guid.NewGuid().ToString()}.png"; // creo il nome dell'immagine
            var filePath = Path.Combine(uploadsFolder, fileName); // imposto il percorso di salvataggio dell'immagine
            objSocieta.Logo = filePath; // imposto il nome e percorso immagine
                var selectedcomune = ComuneList.FirstOrDefault(x => x.DesComuneEstesa == comuneTitle);
                if (selectedcomune!=null)
                    objSocieta.CodComune = selectedcomune.CodComune;
                var soc = await societaService.SaveSocietaAsync(objSocieta, email, imageModel); // Salvo la società e mi memorizzo il record salvato

            await File.WriteAllBytesAsync(filePath, imageModel.ImageData); // Salvo l'immagine nel server

            // Visualizzo un messaggio che indica che tutto è andato a buon fine
            await toast.ShowAsync(new ToastModel
               {
                  Title = "Success",
                  Content = "Operation completed successfully",
                  CssClass = "e-toast-success"
               });
         }
      }
      catch (Exception ex)
      {
         // In caso di errore lo mando a video
         await toast.ShowAsync(new ToastModel
            {
               Title = "Error",
               Content = ex.Message,
               CssClass = "e-toast-danger"
            });

      }
   }

   // Procedura da gestire in caso di invio di dati non validi
   private void invalid()
   {

   }

   // Gestione immagine
   private async Task HandleFileChange(InputFileChangeEventArgs e)
   {
      try
      {
         // Carico l'immagine dal file upload al modello
         var imageBytes = new byte[e.File.Size]; // Trovo i bite dell'immagine
         await e.File.OpenReadStream().ReadAsync(imageBytes); // Leggo uno stream per i bite dell'immagine
         imageModel.ImageData = imageBytes; // Nel campo immagine ci metto ciò che ho letto dallo stream
         imageModel.ImageName = e.File.Name; // Nel campo nome ci metto il nome dell'immagine
         StateHasChanged(); // Notifica al componente che il suo stato è cambiato. Quando applicabile, questo lo farà fa sì che il componente venga nuovamente renderizzato.
      }
      catch (Exception ex)
      {
      }
   }

   // Cancello l'immagine
   private void DeleteImage()
   {
      imageModel.ImageData = null;
      imageModel.ImageName = null;
      StateHasChanged(); // Notifica al componente che il suo stato è cambiato. Quando applicabile, questo lo farà fa sì che il componente venga nuovamente renderizzato.
   }

}
