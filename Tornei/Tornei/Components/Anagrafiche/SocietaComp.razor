@page "/tornei/societa"
@page "/tornei/societa/{email}"

@* Database *@
@using Database.Models
@using Database.Services

@* Oggetti Syncfusion *@
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Notifications

@* Altri *@
@using Microsoft.AspNetCore.WebUtilities

@* Gestione dei percorsi *@
@inject IWebHostEnvironment Environment
@* Nagigazione *@
@inject NavigationManager navigationManager
@* Dichiaro che uso in questa pagina il local storage *@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<SfToast @ref="toast" Target="#target">
    <ToastPositionSettings X="calc(100% - 10px)" Y="10px"></ToastPositionSettings>
</SfToast>

<EditForm Model="@objSocieta" OnInitializedAsync="LoadSocietaData" OnValidSubmit="SaveOrUpdateSocieta">
    <DataAnnotationsValidator />
    @*   <ValidationSummary /> *@

    <div class="container">

        <h1>Societa</h1>

        <h3 class="mb-1"> DATI AZANDALI</h3>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="DesSocieta">Rag Societa:</label>
                </div>
            </div>
            <div class="col-md-8 mb-1">
                <div class="form-group">
                    <InputText id="DesSocieta" @bind-Value="objSocieta.DesSocieta" class="form-control" />
                    <ValidationMessage For="@(() => objSocieta.DesSocieta)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-2 ">
                <div class="form-group">
                    <label for="DesSocieta">Partita Iva:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="PartitaIva" @bind-Value="objSocieta.PartitaIva" class="form-control" />
                    <ValidationMessage For="@(() => objSocieta.PartitaIva)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-2 ">
                <div class="form-group">
                    <label for="Pec">Pec:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="Pec" @bind-Value="objSocieta.Pec" class="form-control" />
                    <ValidationMessage For="@(() => objSocieta.Pec)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-2 ">
                <div class="form-group">
                    <label for="CodiceDestinatario">Codice Destinatario:</label>

                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="CodiceDestinatario" @bind-Value="objSocieta.CodiceDestinatario" class="form-control" />
                    <ValidationMessage For="@(() => objSocieta.CodiceDestinatario)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="QualificaClub">Qualifica Club:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <SfDropDownList TValue="string" TItem="string" DataSource="@QualificaClubValues" @bind-Value="objSocieta.QualificaClub" Placeholder="Select QualificaClub" />
                    <ValidationMessage For="@(() => objSocieta.QualificaClub)" />
                </div>
            </div>
        </div>

        <h3 class="mt-3"> RECAPITO/SEDE</h3>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="CodComune">Comune:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <SfAutoComplete TValue="string" TItem="Comune" @bind-Value="comuneTitle" Placeholder="Select a Comune" DataSource="@ComuneList" PopupHeight="300px" PopupWidth="300px" EnableVirtualization="true" ShowPopupButton="true" AllowFiltering="true">
                        <AutoCompleteFieldSettings Value="DesComuneEstesa" />
                    </SfAutoComplete>
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Indirizzo">Indirizzo:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="Indirizzo" @bind-Value="objSocieta.Indirizzo" class="form-control" />
                    <ValidationMessage For="@(() => objSocieta.Indirizzo)" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Telefono">Telefono:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <input id="Telefono" type="text" @oninput="validateTelefun" @bind="objSocieta.Telefono" class="form-control" maxlength="15" />
                    @if (ValidateTelefun != null)
                    {
                        <label style="color:red">@ValidateTelefun</label>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Cellulare">Cellulare:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <input id="Cellulare" type="text" @oninput="validateCellular" @bind="objSocieta.Cellulare" maxlength="15" class="form-control" />
                    @if (errorMessage != null)
                    {
                        <label style="color:red">@errorMessage</label>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Cellulare">EMail:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="Mail" @bind-Value="objSocieta.Mail" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="SitoInternet">Sito Internet:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="SitoInternet" @bind-Value="objSocieta.SitoInternet" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Nota">Nota:</label>
                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputTextArea id="Nota" @bind-Value="objSocieta.Nota" class="form-control" />
                </div>
            </div>
        </div>

        <h3 class="mt-3"> CONTABILE</h3>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="Iban">Iban:</label>

                </div>
            </div>
            <div class="col-md-8 ">
                <div class="form-group">
                    <InputText id="Iban" @bind-Value="objSocieta.Iban" class="form-control" />
                </div>
            </div>
        </div>

        <h3 class="mt-3"> PROFILO ONLINE</h3>

        <div class="row mb-1">
            <div class="col-md-3 mb-1">
                <div class="form-group">
                    <label for="immagine">Immagine:</label>
                </div>
            </div>
            <div class="col-md-8">
                <div class="form-group">
                    <InputFile OnChange="HandleFileChange" class="form-control" />
                    @* L'immagine c'è la visualizzo *@
                    @if (fileExists)
                    {
                        <img src="@desiredPath" alt="Selected Image" style="max-width: 300px; max-height: 300px;" />
                    }
                    @* se ho l'immagine presente nel modello *@
                    @if (imageModel.ImageData != null)
                    {
                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageModel.ImageData)}")" alt="Selected Image" style="max-width: 300px; max-height: 300px;" />
                        <br />
                        <button class="btn btn-danger" @onclick="DeleteImage" type="button">Delete Image</button>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-1">
            <div class="offset-md-3 col-md-8 mb-1">
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Salva</button>
                </div>
            </div>
        </div>
    </div>
    <SfSpinner @bind-Visible="visible"></SfSpinner>
</EditForm>

@code {

    [Parameter]
    public string email { get; set; } = string.Empty;
    public string comuneTitle = string.Empty;
    private List<string> QualificaClubValues = new List<string> { "NC", "1 LV", "2 LV", "3 LV", "4 LV", "A" }; // Lista valori per Qualifica club

    string desiredPath;
    public bool visible { get; set; } = false;
    bool fileExists;

    @inject ComuneService comuneService; // Dichiaro di voler usare le procedure per la gestione dei comuni
    @inject SocietaService societaService; // Dichiaro di voler usare le procedure per la gestione della società
    @inject ValidationServices Validation;

    Societa objSocieta = new Societa(); // Creo l'oggetto società

    private ImageModel imageModel = new ImageModel(); // Dichiaro l'oggetto immagine

    List<Comune> ComuneList = new List<Comune>();

    private SfToast toast;

    // In fase di inizializzazione
    protected override void OnInitialized()
    {
        ShowSppiner(); // Mostra la rotellina
    }

    // dopo render della pagina
    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            // Al primo caricamento
            if (firstRender)
            {
                ComuneList = await comuneService.GetComunesAsync(); // Carico la lista dei comuni
                GetProfile(); // Mi carico il profilo dal locale storage
                HideSppiner(); // Nascondi la rotellina
                StateHasChanged(); // Aggiorno lo stato
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    // Recupero la società utente dal local storage
    private async void GetProfile()
    {
        try
        {
            var encodedUserId = await LocalStorage.GetItemAsStringAsync("LoginUserId"); // Leggo lo user ID dal local storage dove l'ho memorizzato
            var userid = encodedUserId?.Replace("\"", ""); // Lo codifico rimpiazzando le / con niente
            if (userid != null) // Se è diverso da null
            {
                var soc = await societaService.GetSocietaByUserIdAsync(userid.ToString());
                if (soc != null) // Se la società viene trovata
                {
                    objSocieta = soc; // Passo la società letta
                    var com = ComuneList.FirstOrDefault(x => x.CodComune == objSocieta.CodComune);
                    comuneTitle = com.DesComuneEstesa;
                    string fullPath = objSocieta.Logo; // leggo il percorso e nome del file
                    string fileName = System.IO.Path.GetFileName(fullPath);


                    // Trovo il percorso dove salvare
                    var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                    var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
                    imageModel.ImageName = fileName; // Recupero il nome del file
                    desiredPath = Percorso + "\\" + imageModel.ImageName; // Aggiungo il nome del file
                    fileExists = System.IO.File.Exists(fullPath); // Salvo su disco
                    StateHasChanged(); // Aggiorno lo stato
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    // Salva o aggiorna la società
    private async Task SaveOrUpdateSocieta()
    {
        try
        {
            // Leggo il percorso dove uploadare l'immagine
            var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
            var uploadsFolder = Path.Combine(Environment.WebRootPath, Percorso);

            var fileName = $"{Guid.NewGuid().ToString()}.png"; // creo il nome dell'immagine
            var filePath = Path.Combine(uploadsFolder, fileName); // imposto il percorso di salvataggio dell'immagine

            // Effettuo la ricerca del comune per descrizione
            // [LUCA]: as far as I know the syncfusion controls work via code and return the description themselves and vice versa, for me there is no need to search by description also because it may not give correct results
            //[xxxx] i never used sync fusion conrols but acording to documentation search work for value property and we can only bind value property
            var selectedcomune = ComuneList.FirstOrDefault(x => x.DesComuneEstesa == comuneTitle);
            if (selectedcomune != null) // Se la trovo
                objSocieta.CodComune = selectedcomune.CodComune; // Prendo il codice del comune

            //var soc = await societaService.SaveSocietaAsync(objSocieta, email, imageModel); // Salvo la società e mi memorizzo il record salvato

            //Inizio Aggiornamento
            if (objSocieta.CodSocieta == 0) // Se la società non esiste
            {
                objSocieta.Logo = filePath; // imposto il nome e percorso immagine
                var soc = await societaService.SaveSocietaAsync(objSocieta, email, imageModel); // La salvo
            }
            else
            {
                // La aggiorno
                if (imageModel.ImageData != null) // Se ho l'immagine nel modello
                {
                    objSocieta.Logo = filePath; // imposto il nome e percorso immagine
                }
                else
                {
                    // Metto il logo di default
                    objSocieta.Logo = imageModel.ImageName;
                }
                // Aggiorno la società
                var soc = await societaService.UpdateSocietaAsync(objSocieta, email, imageModel);
            }

            // Carico l'immagine
            if (imageModel.ImageData != null) // Se ho l'immagine nel modello
            {
                await File.WriteAllBytesAsync(filePath, imageModel.ImageData); // Salvo l'immagine nel server
            }

            // Visualizzo un messaggio che indica che tutto è andato a buon fine
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Success",
                    Content = "Operation completed successfully",
                    CssClass = "e-toast-success"
                });
        }
        catch (Exception ex)
        {
            // In caso di errore lo mando a video
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Error",
                    Content = ex.Message,
                    CssClass = "e-toast-danger"
                });

        }
    }

    // Procedura da gestire in caso di invio di dati non validi
    private void invalid()
    {

    }

    // Gestione immagine
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            // Carico l'immagine dal file upload al modello
            int filesize = 10051200;
            using var memorystream = new MemoryStream();
            await e.File.OpenReadStream(filesize).CopyToAsync(memorystream);
            var imageBytes = memorystream.ToArray();
            imageModel.ImageData = imageBytes;
            imageModel.ImageName = e.File.Name;
            desiredPath = null;
            StateHasChanged(); // Aggiorno lo stato
        }
        catch (Exception ex)
        {
        }
    }

    // Cancello l'immagine
    private void DeleteImage()
    {
        imageModel.ImageData = null;
        imageModel.ImageName = null;
        StateHasChanged(); // Notifica al componente che il suo stato è cambiato. Quando applicabile, questo lo farà fa sì che il componente venga nuovamente renderizzato.
    }

    // Mostra Rotellina
    public void ShowSppiner()
    {
        this.visible = true;
    }

    // Nascondi Rotellina
    public async void HideSppiner()
    {
        this.visible = false;
    }

    // [LUCA]
    // this is the code of the function that checks whether the pressed key is a number, if it is it leaves it, if it is not it cancels it.
    // function SoloNumeriInteri(Evento)
    // {
    //    var Carattere = (Evento.which) ? Evento.which : Evento.keyCode;
    //    if (Carattere > 31 && (Carattere < 48 || Carattere > 57))
    //    {
    //       return false;
    //    }
    //    return true;
    // }
    // In my opinion, the procedure below should be modified and MOVED to the "Common Procedures" section as
    // it will be recalled from every page of the project that needs it.
    private string errorMessage = "";
    private string ValidateTelefun = "";



    public void validateTelefun(ChangeEventArgs e)
    {
        string inputValue = e.Value.ToString();
        ValidateTelefun = Validation.ValidateNumber(inputValue);
        StateHasChanged();
    }
    public void validateCellular(ChangeEventArgs e)
    {
        string inputValue = e.Value.ToString();
        errorMessage = Validation.ValidateNumber(inputValue);
        StateHasChanged();

    }


}
