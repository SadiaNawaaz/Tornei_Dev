@page "/tornei/ListaDecampo"
@using Database.Models
@using Database.Services
@using Syncfusion.Blazor.DropDowns
@inject IWebHostEnvironment Environment
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Spinner
@inject NavigationManager navigationManager
<h3>ListaDeCampo</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
   <div class="row">
            <SfGrid DataSource="@ListCampo" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })" AllowPaging="true">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Campo.CodCampo) HeaderText="Add" IsPrimaryKey="true" TextAlign="TextAlign.Center" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(Campo.ListDeTipologia) HeaderText="Tipologia" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Center" Width="150">
                        <Template>
                            @{
                                var campo = context as Campo;
                                var listDeTipologia = new List<string> { "Campo da gioco", "Campo di Allenamento" };
                                <EjsDropDownList TValue="string" DataSource="listDeTipologia" Value="@campo?.ListDeTipologia"></EjsDropDownList>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(Campo.Nome) HeaderText="Nome" TextAlign="TextAlign.Center" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(Campo.NomeCustode) HeaderText="Custode" Type="ColumnType.String" TextAlign="TextAlign.Center" Width="160"></GridColumn>
                    <GridColumn Field=@nameof(Campo.TelefonoCustode) HeaderText="TelefonoCustode" Type="ColumnType.String" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Campo.GeoLocalizzazione) HeaderText="GeoLocalizzazione" Type="ColumnType.String" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                    <GridColumn Width="auto" TextAlign="TextAlign.Center" HeaderText="Action">
                        <Template>
                            @{
                                var currentItem = context as Campo;
                            }
                           
                            <button class="btn btn-danger" @onclick="(e) => DeleteItem(currentItem, e)" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete">
                                Delete
                                <i class="fa-regular fa-trash-can"></i>
                            </button>
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    @inject CampoServices _CampoServices;
    private List<string> ToolbarItems = new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" };
    List<Campo> ListCampo = new();
    private SfToast toast;
    public List<string> ListDeTipologia { get; set; } = new List<string>() { "Campo da gioco", "Campo di Allenamento" };
    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                ListCampo = await _CampoServices.GetCampoAsync();
                StateHasChanged();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async void DeleteItem(Campo item, MouseEventArgs e)
    {
        bool res = true;
        if (res == true)
        {
            // Messaggio di successo
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Success",
                    Content = "Record Deleted Successfully.",
                    CssClass = "e-toast-success"
                });
        }
        else
        {
            // Se invece ha avuto esito negativo mando l'errore
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Error",
                    Content = "Something Went Wrong. ",
                    CssClass = "e-toast-danger"
                });
        }
        OnAfterRender(true); // Richiamo la funzione (dopo il redenr dell'oggetto)
        StateHasChanged(); // Aggiorno lo stato
    }
}
