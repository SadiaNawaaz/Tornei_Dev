@page "/tornei/SocietaList"

@* Database *@
@using Database.Models
@using Database.Services

@* Oggetti Syncfusion *@
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Spinner

@* Gestione dei percorsi *@
@inject IWebHostEnvironment Environment
@* Nagigazione *@
@inject NavigationManager navigationManager
@* Dichiaro che uso in questa pagina il local storage *@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container">
   <h3>Societa</h3>
   <div class="card">
      <div class="heading">Societa List</div>
      <div>
         <SfGrid DataSource="@_SocietaList" EnableVirtualization="true" AllowPaging="true" EnableColumnVirtualization="true">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
            <GridEditSettings AllowAdding="true" AllowDeleting="true"></GridEditSettings>
            <GridEvents TValue="Societa"></GridEvents>
            <GridColumns>
               <GridColumn Width="90" TextAlign="TextAlign.Left" HeaderText="Actions">
                  <Template>
                     @{
                        var currentItem = context as Societa;
                     }
                     <button class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit" style="width:32px;height:35px"
                             @onclick="(e) => EditNavigation(currentItem, e)">
                                <i class="fa-solid fa-pencil" style="font-size:12px"></i>
                     </button>
                            <button class="btn btn-danger" @onclick="(e) => DeleteItem(currentItem, e)" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete" style="width:32px;height:35px">
                                <i class="fa-regular fa-trash-can" style="font-size:12px"></i>
                     </button>
                  </Template>
               </GridColumn>
               <GridColumn Field=@nameof(Societa.DesSocieta) HeaderText="DesSocieta" Width="140"></GridColumn>
               <GridColumn Field=@nameof(Societa.CodiceDestinatario) HeaderText="Codice Destinatario" Width="140"></GridColumn>
               <GridColumn Field=@nameof(Societa.CodComune) HeaderText="Cod Comune" Width="140"></GridColumn>
               <GridColumn Field=@nameof(Societa.Telefono) HeaderText="PartitaIva" TextAlign="TextAlign.Right" Width="140"></GridColumn>
               <GridColumn Field=@nameof(Societa.Cellulare) HeaderText="Telefono" TextAlign="TextAlign.Right" Width="140"></GridColumn>
               <GridColumn Field=@nameof(Societa.Mail) HeaderText="Telefono" TextAlign="TextAlign.Right" Width="140"></GridColumn>
            </GridColumns>
         </SfGrid>
      </div>
   </div>
   <div class="form-group mt-3 d-flex justify-content-start w-8">
      <button type="submit" class="btn btn-primary">Save</button>
   </div>
</div>

@code {
   // Lista dei servizi
   @inject SocietaService SocietaService;


   private SfToast toast; // Popup

   List<Societa> _SocietaList = new();

   // Command click handler for all command buttons in the grid
   public Societa SelectedData = new Societa();

   // Cancello La società
   private async void DeleteItem(Societa item, MouseEventArgs e)
   {

      // Cancello la società
      bool res = await SocietaService.DeleteSocietaAsync(item.CodSocieta);
      // Se le cancellazione è andata a buon fine
      if (res == true)
      {
         // Messaggio di successo
         await toast.ShowAsync(new ToastModel
            {
               Title = "Success",
               Content = "Record Deleted Successfully.",
               CssClass = "e-toast-success"
            });
      }
      else
      {
         // Se invece ha avuto esito negativo mando l'errore
         await toast.ShowAsync(new ToastModel
            {
               Title = "Error",
               Content = "Something Went Wrong. ",
               CssClass = "e-toast-danger"
            });
      }
      OnAfterRender(true); // Richiamo la funzione (dopo il redenr dell'oggetto)
      StateHasChanged(); // Aggiorno lo stato
   }

   // Dopo il primo render
   protected override async void OnAfterRender(bool firstRender)
   {
      try
      {
         if (firstRender) // Lo eseguo solo la prima volta
         {
            _SocietaList = await SocietaService.GetAllSocietaAsync(); // Carico la lista delle società
            StateHasChanged(); // Aggiorno lo stato
         }
      }
      catch (Exception)
      {
         throw;
      }
   }

   // Vado in modifica
   public void EditNavigation(Societa args, MouseEventArgs e)
   {
      // Imposto la società selezionata
      navigationManager.NavigateTo($"/tornei/GestioneSocietaComp?CodSocieta=" + args.CodSocieta);
   }
}