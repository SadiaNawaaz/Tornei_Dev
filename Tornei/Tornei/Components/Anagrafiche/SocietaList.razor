@page "/tornei/SocietaList"

@* Database *@
@using Database.Models
@using Database.Services

@* Oggetti Syncfusion *@
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Spinner

@* Gestione dei percorsi *@
@inject IWebHostEnvironment Environment
@* Nagigazione *@
@inject NavigationManager navigationManager
@* Dichiaro che uso in questa pagina il local storage *@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container">
    <h3>Societa</h3>
    <div class="card">
        <div class="heading">Societa List</div>
        <div>
            <SfGrid DataSource="@_SocietaList" AllowFiltering="true" AllowPaging="true">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <GridEditSettings AllowAdding="true" AllowDeleting="true"></GridEditSettings>
                <GridEvents TValue="Societa"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(Societa.CodiceDestinatario) HeaderText="Codice Destinatario" Width="auto"></GridColumn>
                    <GridColumn Field=@nameof(Societa.DesSocieta) HeaderText="DesSocieta" Width="auto"></GridColumn>
                    <GridColumn Field=@nameof(Societa.CodComune) HeaderText="Cod Comune" Width="auto"></GridColumn>
                    <GridColumn Field=@nameof(Societa.Telefono) HeaderText="PartitaIva" TextAlign="TextAlign.Right" Width="auto"></GridColumn>
                    <GridColumn Field=@nameof(Societa.Cellulare) HeaderText="Telefono" TextAlign="TextAlign.Right" Width="auto"></GridColumn>
                    <GridColumn Field=@nameof(Societa.Mail) HeaderText="Telefono" TextAlign="TextAlign.Right" Width="auto"></GridColumn>
                    <GridColumn Width="auto" TextAlign="TextAlign.Center" HeaderText="Actions">
                        <Template>
                            @{
                                var currentItem = context as Societa;
                            }
                            <button class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"
                                    @onclick="(e) => EditNavigation(currentItem, e)">
                                Edit
                                <i class="fa-solid fa-pencil"></i>
                            </button>
                            <button class="btn btn-danger" @onclick="(e) => DeleteItem(currentItem, e)" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete">
                                Delete
                                <i class="fa-regular fa-trash-can"></i>
                            </button>
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
    <div class="form-group mt-3 d-flex justify-content-start w-8">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</div>

@code {
    @inject SocietaService SocietaService;

   
    private SfToast toast;

    List<Societa> _SocietaList = new();

    // Command click handler for all command buttons in the grid
    public Societa SelectedData = new Societa();

    // Cancello La società
    private async void DeleteItem(Societa item, MouseEventArgs e)
    {
        // Imposto la società selezionata
        // [LUCA] can we simplify here like this ?
        // bbool res = await SocietaService.DeleteSocietaAsync(item.CodAnagrafica);
        // start
        
        bool res = await SocietaService.DeleteSocietaAsync(item.CodSocieta);
        // end
        // Se le cancellazione è andata a buon fine
        if (res == true)
        {
            // Messaggio di successo
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Success",
                    Content = "Record Deleted Successfully.",
                    CssClass = "e-toast-success"
                });
        }
        else
        {
            // Se invece ha avuto esito negativo mando l'errore
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Error",
                    Content = "Something Went Wrong. ",
                    CssClass = "e-toast-danger"
                });
        }
        OnAfterRender(true); // Richiamo la funzione (dopo il redenr dell'oggetto)
        StateHasChanged(); // Aggiorno lo stato
    }

    // Dopo il primo render
    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender) // Lo eseguo solo la prima volta
            {
                _SocietaList = await SocietaService.GetAllSocietaAsync(); // Carico la lista delle società
                StateHasChanged(); // Aggiorno lo stato
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    // Vado in modifica
    public void EditNavigation(Societa args, MouseEventArgs e)
    {
        // Imposto la società selezionata
        // [LUCA] can we simplify here like this ?
        // navigationManager.NavigateTo($"/tornei/GestioneSocietaComp?CodSocieta=" +  item.CodAnagrafica);
      
        navigationManager.NavigateTo($"/tornei/GestioneSocietaComp?CodSocieta=" + args.CodSocieta);
        // End
        // what are these two commands for?
     
    }
}