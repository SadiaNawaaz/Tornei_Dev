@page "/tornei/GestioneAnagraficaComp"
@using Database.Models
@using Database.Services
@using Microsoft.AspNetCore.WebUtilities
@using Syncfusion.Blazor.DropDowns
@inject IWebHostEnvironment Environment
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Data
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@* Syncfusion Toast *@
<SfToast @ref="toast" Target="#target">
    <ToastPositionSettings X="calc(100% - 10px)" Y="10px"></ToastPositionSettings>
</SfToast>
@* <div class="row">
    <div id="container2">
        <SfSpinner Visible="true" Type="SpinnerType.Bootstrap5" CssClass="e-spin-overlay"></SfSpinner>
    </div>
</div>
 *@
<div class="container-fluid">

    <div class="row">

        <div class="col-md-9">
            <EditForm Model="@anagrafica" OnValidSubmit="SaveOrUpdateAnagrafica">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="container">


                    <h3>
                        Anagrafica
                    </h3>
                    <div class="row mb-1">

                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>Cognome:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputText id="Cognome" @bind-Value="anagrafica.Cognome" class="form-control" />
                                <ValidationMessage For="@(() => anagrafica.Cognome)" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>Nome:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputText id="Nome" @bind-Value="anagrafica.Nome" class="form-control" />
                                <ValidationMessage For="@(() => anagrafica.Nome)" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>CodFiscale:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputText id="CodFiscale" @bind-Value="anagrafica.CodFiscale" class="form-control" />
                                <ValidationMessage For="@(() => anagrafica.CodFiscale)" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>Indirizzo:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputText id="Indirizzo" @bind-Value="anagrafica.Indirizzo" class="form-control" />
                                <ValidationMessage For="@(() => anagrafica.Indirizzo)" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>Telefono:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                @* [LUCA]: Manage with the onkeypress="" event the fact that you can only enter numbers *@
                                @*    [XXXX] this is blazor form validation and recomended as this is more secure , this is recomended but if you say we can use java script validation *@
                                <input type="text" maxlength="15" id="Telefono" @oninput="validateTelefun" @bind="anagrafica.Telefono" class="form-control" />
                                @if (ValidateTelefun != null)
                                {
                                    <label style="color:red">@ValidateTelefun</label>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>Cellulare:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                @* [LUCA]: Manage with the onkeypress="" event the fact that you can only enter numbers *@
                                @*[XXXX]: Completed*@
                                <input type="text" maxlength="15" id="Cellulare" @oninput="validateCellular" @bind="anagrafica.Cellulare" class="form-control" />
                                @if (errorMessage != null)
                                {
                                    <label style="color:red">@errorMessage</label>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>Mail:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputText id="Mail" @bind-Value="anagrafica.Mail" class="form-control" />
                                <ValidationMessage For="@(() => anagrafica.Mail)" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label>NoMail:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputCheckbox id="NoMail" @bind-Value="anagrafica.NoMail" class="form-check-input" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label for="CodComuneDiNascita">Comune Di Nascita:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <SfAutoComplete TValue="string" TItem="Comune" Query="@LocalDataQuery" @bind-Value="selectedNisComune" Placeholder="Seleziona Comune" DataSource="@ComuneList" PopupHeight="300px" PopupWidth="300px" EnableVirtualization="true" ShowPopupButton="true">
                                    <AutoCompleteFieldSettings Value="DesComuneEstesa" />
                                </SfAutoComplete>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label for="DataDiNascita">Data Di Nascita:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputDate id="DataDiNascita" @bind-Value="anagrafica.DataDiNascita" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label for="Sesso">Sesso:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <label for="Sesso">Sesso:</label>
                                <SfDropDownList TValue="string" TItem="string" @bind-Value="anagrafica.Sesso" DataSource="@GenderList" Placeholder="Select Gender">
                                </SfDropDownList>
                            </div>

                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label for="CodComuneResidenza">Comune Residenza:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">

                                <SfAutoComplete TValue="string" TItem="Comune" Query="@LocalDataQuery" @bind-Value="selectedResComune" Placeholder="Select a Comune" DataSource="@ComuneList" PopupHeight="300px" PopupWidth="300px" EnableVirtualization="true" ShowPopupButton="true">
                                    <AutoCompleteFieldSettings Value="DesComuneEstesa" />
                                </SfAutoComplete>

                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label for="IndirizzoResidenza">Indirizzo Residenza:</label>
                            </div>
                        </div>
                        <div class="col-md-8 mb-1">
                            <div class="form-group">
                                <InputText id="IndirizzoResidenza" @bind-Value="anagrafica.IndirizzoResidenza" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-md-3 mb-1">
                            <div class="form-group">
                                <label for="immagine">Immagine:</label>
                            </div>
                        </div>

                        <div class="col-md-8">
                            <div class="form-group">

                                <InputFile OnChange="HandleFileChange" class="form-control" />

                                @if (fileExists)
                                {
                                    <img src="@desiredPath" alt="Selected Image" style="max-width: 300px; max-height: 300px;" />
                                }
                                @if (imageModel.ImageData != null)
                                {



                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageModel.ImageData)}")" alt="Scegli immagine" style="max-width: 300px; max-height: 300px; margin-right:12px" />

                                    <button style="margin:5px" class="btn btn-danger" @onclick="DeleteImage" type="button">Delete Image</button>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="row mb-1">
                        <div class="offset-md-3 col-md-8 mb-1">
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary">Salva</button>
                            </div>
                        </div>
                    </div>

                </div>
                <SfSpinner @bind-Visible="visible"></SfSpinner>
            </EditForm>
        </div>
        @if (CodAnagrafica != 0)
        {
            <div class="col-md-3">
                <!-- Role list  goes here -->
                <div>
                    <SfMultiSelect TValue="string[]" TItem="AspNetRole" Placeholder="Select A Role" @bind-Value="@MultiVal" DataSource="@roles">
                        <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
            </div>
        }
    </div>
</div>
<style>
    .row {
        display: flex;
    }

    #container2 {
        height: 120px;
        width: 120px;
        position: relative;
    }
</style>
@code {
    [Parameter]
    public string email { get; set; } = string.Empty;
    private List<string> GenderList = new List<string> { "Male", "Female" };
    private Anagrafica anagrafica = new Anagrafica();
    public bool visible { get; set; } = false;
    private bool isEditMode = false;
    public Query LocalDataQuery = new Query().Take(6);

    @inject ComuneService comuneService;
    @inject AnagraficaService anagraficaService ;
    @inject ValidationServices Validation;
    public string[] MultiVal { get; set; } = new string[] { };
    public List<string> MultiVals { get; set; } = new List<string>();
    List<AspNetRole> roles = new List<AspNetRole>();
    @inject RoleService RoleService;
    bool fileExists;

    private ImageModel imageModel = new ImageModel();

    string selectedResComune = string.Empty;
    string selectedNisComune = string.Empty;
    List<Comune> ComuneList = new List<Comune>();
    private SfToast toast;
    string desiredPath;

    #region Initialization
    int CodAnagrafica = 0;

    protected override void OnInitialized()
    {
        ShowSppiner();
        // Uso la virtualizzazione blazor per evitare di caricare la query competa, in pratica carica solo un po di record alla volta
        anagrafica.DataDiNascita = DateOnly.FromDateTime(DateTime.Now);
        this.ComuneList = Enumerable.Range(1, 150).Select(i => new Comune()).ToList();




        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("CodAnagrafica", out var id))
        {
            if (string.IsNullOrEmpty(id))
            {
                CodAnagrafica = 0;
            }
            else
            {
                CodAnagrafica = Convert.ToInt32(id);
            }
        }
    }



    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                ComuneList = await comuneService.GetComunesAsync();
                roles = await RoleService.GetRoles();
                if (CodAnagrafica != 0)
                {
                    GetProfile();
                }
                HideSppiner();
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    #endregion

    private async void GetProfile()
    {
        try
        {
            int j = 0;
            if (CodAnagrafica != 0)
            {
                var anarg = await anagraficaService.GetAnagraficaRoleByIdAsync(CodAnagrafica);
                if (anarg != null && anarg.CodAnagrafica > 0)
                {
                    anagrafica = anarg;
                    //  MultiVals.Add( anagrafica.UserRoleList.ToString());

                    if (anagrafica.UserRoleList != null)
                    {
                        foreach (var i in anagrafica.UserRoleList)
                        {
                            MultiVals.Add(i.RoleId);

                        }
                        MultiVal = MultiVals.ToArray();
                    }
                    selectedResComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneResidenza).DesComuneEstesa;
                    selectedNisComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneDiNascita).DesComuneEstesa;
                    string fullPath = anagrafica.Immagine;
                    string fileName = System.IO.Path.GetFileName(fullPath);

                    // Trovo il percorso dove salvare
                    var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                    var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
                    imageModel.ImageName = fileName; // Recupero il nome del file
                    desiredPath = Percorso + "\\" + imageModel.ImageName; // Aggiungo il nome del file
                    fileExists = System.IO.File.Exists(fullPath); // Salvo su disco
                    StateHasChanged(); // Aggiorno lo stato
                }
            }
            else
            {

                var encodedUserId = await LocalStorage.GetItemAsStringAsync("LoginUserId");

                var userid = encodedUserId?.Replace("\"", "");
                if (userid != null)
                {
                    var anarg = await anagraficaService.GetAnagraficaByUserIdAsync(userid.ToString());
                    if (anarg != null)
                    {
                        anagrafica = anarg;
                        selectedResComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneResidenza).DesComuneEstesa;
                        selectedNisComune = ComuneList.FirstOrDefault(x => x.CodComune == anagrafica.CodComuneDiNascita).DesComuneEstesa;

                        string fullPath = anagrafica.Immagine;
                        string fileName = System.IO.Path.GetFileName(fullPath);

                        // [LUCA]: this code is repeated several times, isn't it better to use a procedure to call passing the parameters
                        // instead of repeating it every time? from start to end
                        // START
                        // Trovo il percorso dove salvare
                        var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                        var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
                        imageModel.ImageName = fileName; // Recupero il nome del file
                        desiredPath = Percorso + "\\" + imageModel.ImageName; // Aggiungo il nome del file
                        fileExists = System.IO.File.Exists(fullPath); // Salvo su disco
                        StateHasChanged(); // Aggiorno lo stato
                                           // END

                    }
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    // Salva o aggiorna l'anagrafica
    MenuRuolo tempobj = new();
    List<MenuRuolo> tempList = new();
    private async Task SaveOrUpdateAnagrafica()
    {
        if (isEditMode)
        {
            // Se sono in modifica aggiorno
            //  await anagraficaService.UpdateAnagraficaAsync(anagrafica);
        }
        else
        {

            var Configurazione = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            var Percorso = Configurazione.GetValue<string>("Percorsi:Profilo");
            var uploadsFolder = Path.Combine(Environment.WebRootPath, Percorso);

            var fileName = $"{Guid.NewGuid().ToString()}.png"; // creo il nome dell'immagine
            var filePath = Path.Combine(uploadsFolder, fileName); // imposto il percorso di salvataggio dell'immagine
            var rescom = ComuneList.FirstOrDefault(x => x.DesComuneEstesa == selectedResComune);
            var niscom = ComuneList.FirstOrDefault(x => x.DesComuneEstesa == selectedNisComune);
            if (rescom != null)
                anagrafica.CodComuneResidenza = rescom.CodComune;
            if (niscom != null)
                anagrafica.CodComuneDiNascita = niscom.CodComune;

            foreach (var i in MultiVal)
            {
                tempobj.RoleId = i;
                tempList.Add(tempobj);
                tempobj = new();
            }
            anagrafica.RoleList = tempList;
            if (anagrafica.CodAnagrafica != 0)
            {
                if (imageModel.ImageData != null)
                {
                    anagrafica.Immagine = filePath; // imposto il nome immagine su anagrafica
                    await File.WriteAllBytesAsync(filePath, imageModel.ImageData); // Salvo l'immagine nel server
                }

                await anagraficaService.UpdateAnagraficaMemberAsync(anagrafica); // Aggiorno il profilo e controllo se associarlo
            }
            // else
            // {
            //     if (imageModel.ImageData != null)
            //     {
            //         anagrafica.Immagine = filePath; // imposto il nome e percorso immagine
            //     }
            //     else
            //     {
            //         anagrafica.Immagine = imageModel.ImageName;
            //     }
            //     await anagraficaService.UpdateAnagraficaMemberAsync(anagrafica); // Aggiorno il profilo e controllo se associarlo

            // }


            // Pop up operazione riuscita
            await toast.ShowAsync(new ToastModel
                {
                    Title = "Successo",
                    Content = "Operatione conclusa con successo",
                    CssClass = "e-toast-success"
                });

        }
    }


    // Gestione immagine
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            // Carico l'immagine dal file upload al modello
            int filesize = 10051200;
            using var memorystream = new MemoryStream();
            await e.File.OpenReadStream(filesize).CopyToAsync(memorystream);
            var imageBytes = memorystream.ToArray();
            imageModel.ImageData = imageBytes;
            imageModel.ImageName = e.File.Name;
            desiredPath = null;
            StateHasChanged(); // Aggiorno lo stato
        }
        catch (Exception ex)
        {
        }
    }

    // Cancello l'immagine
    private void DeleteImage()
    {
        imageModel.ImageData = null;
        imageModel.ImageName = null;
        StateHasChanged(); // Notifica al componente che il suo stato è cambiato. Quando applicabile, questo lo farà fa sì che il componente venga nuovamente renderizzato.
    }

    public void ShowSppiner()
    {
        this.visible = true;
    }

    public async void HideSppiner()
    {
        this.visible = false;
    }

    // [LUCA]
    // this is the code of the function that checks whether the pressed key is a number, if it is it leaves it, if it is not it cancels it.
    // function SoloNumeriInteri(Evento)
    // {
    //    var Carattere = (Evento.which) ? Evento.which : Evento.keyCode;
    //    if (Carattere > 31 && (Carattere < 48 || Carattere > 57))
    //    {
    //       return false;
    //    }
    //    return true;
    // }
    // In my opinion, the procedure below should be modified and MOVED to the "Common Procedures" section as
    // it will be recalled from every page of the project that needs it.
    private string errorMessage = "";
    private string ValidateTelefun = "";



    public void validateTelefun(ChangeEventArgs e)
    {
        string inputValue = e.Value.ToString();
        ValidateTelefun = Validation.ValidateNumber(inputValue);
        StateHasChanged();
    }
    public void validateCellular(ChangeEventArgs e)
    {
        string inputValue = e.Value.ToString();
        errorMessage = Validation.ValidateNumber(inputValue);
        StateHasChanged();

    }
}

